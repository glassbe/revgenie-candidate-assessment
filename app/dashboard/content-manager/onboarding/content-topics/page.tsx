"use client"

import type React from "react"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { ArrowRight, FileText, Check, ArrowLeft, Plus, X } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Checkbox } from "@/components/ui/checkbox"


export default function ContentTopicsPage() {
  const router = useRouter()
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Pre-filled topics that appear to have been generated by AI
  const [topics, setTopics] = useState([
    {
      id: "1",
      name: "AI-Powered Marketing Automation",
      selected: true,
      examples: ["How AI is Transforming Marketing Workflows", "5 Ways to Automate Your Content Strategy"],
    },
    {
      id: "2",
      name: "ROI Measurement & Analytics",
      selected: true,
      examples: ["Measuring Content Marketing ROI: A Complete Guide", "Analytics Tools Every Marketer Should Use"],
    },
    {
      id: "3",
      name: "Content Creation Efficiency",
      selected: true,
      examples: ["Content Creation Hacks for Busy Teams", "Streamlining Your Content Production Process"],
    },
    {
      id: "4",
      name: "Lead Generation Strategies",
      selected: true,
      examples: ["Lead Magnets That Convert in 2023", "Building Effective Lead Nurturing Campaigns"],
    },
    {
      id: "5",
      name: "Marketing Technology Trends",
      selected: false,
      examples: ["MarTech Stack Essentials", "Emerging Technologies Reshaping Digital Marketing"],
    },
  ])

  const [newTopic, setNewTopic] = useState("")

  const handleTopicToggle = (id: string) => {
    setTopics(
      topics.map((topic) => {
        if (topic.id === id) {
          return { ...topic, selected: !topic.selected }
        }
        return topic
      }),
    )
  }

  const handleTopicNameChange = (id: string, newName: string) => {
    setTopics(
      topics.map((topic) => {
        if (topic.id === id) {
          return { ...topic, name: newName }
        }
        return topic
      }),
    )
  }

  const handleAddTopic = () => {
    if (newTopic.trim()) {
      setTopics([
        ...topics,
        {
          id: Date.now().toString(),
          name: newTopic,
          selected: true,
          examples: [],
        },
      ])
      setNewTopic("")
    }
  }

  const handleRemoveTopic = (id: string) => {
    setTopics(topics.filter((topic) => topic.id !== id))
  }
  
  const handleAddContentIdea = (topicId: string, contentIdea: string) => {
    if (!contentIdea.trim()) return
    
    setTopics(topics.map(topic => {
      if (topic.id === topicId) {
        return {
          ...topic,
          examples: [...topic.examples, contentIdea]
        }
      }
      return topic
    }))
  }
  
  const handleRemoveContentIdea = (topicId: string, index: number) => {
    setTopics(topics.map(topic => {
      if (topic.id === topicId) {
        const newExamples = [...topic.examples]
        newExamples.splice(index, 1)
        return {
          ...topic,
          examples: newExamples
        }
      }
      return topic
    }))
  }
  
  const handleContentIdeaChange = (topicId: string, index: number, value: string) => {
    setTopics(topics.map(topic => {
      if (topic.id === topicId) {
        const newExamples = [...topic.examples]
        newExamples[index] = value
        return {
          ...topic,
          examples: newExamples
        }
      }
      return topic
    }))
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)

    // In a real app, you would save this data to your state management or API
    setTimeout(() => {
      router.push("/dashboard/content-manager/onboarding/content-preferences")
    }, 500)
  }

  const handleBack = () => {
    router.push("/dashboard/content-manager/onboarding/target-audience")
  }

  return (
      <div className="py-8">
        <div className="mb-8">
          <Button variant="ghost" onClick={handleBack} className="mb-4">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back
          </Button>

          <div className="flex items-center space-x-2 mb-2">
            <div className="bg-green-100 p-1.5 rounded-full">
              <Check className="h-4 w-4 text-green-600" />
            </div>
            <p className="text-sm text-green-600 font-medium">AI Analysis Complete</p>
          </div>

          <h1 className="text-2xl font-bold">Content Topics</h1>
          <p className="text-muted-foreground">
            Based on your business goal and target audience, we've identified these relevant topics for your content
            strategy.
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <FileText className="h-5 w-5 text-purple-500 mr-2" />
                Recommended Topics
              </CardTitle>
              <CardDescription>Select the topics you want to focus on in your content strategy</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {topics.map((topic) => (
                  <div key={topic.id} className="border rounded-lg p-4">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex items-center gap-3 flex-grow">
                        <Checkbox
                          id={`topic-${topic.id}`}
                          checked={topic.selected}
                          onCheckedChange={() => handleTopicToggle(topic.id)}
                        />
                        <Input
                          value={topic.name}
                          onChange={(e) => handleTopicNameChange(topic.id, e.target.value)}
                          className="font-medium bg-transparent border-none hover:bg-gray-50 focus:bg-white mr-4"
                        />
                      </div>
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        className="h-8 w-8 p-0 text-muted-foreground shrink-0"
                        onClick={() => handleRemoveTopic(topic.id)}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                    
                    {topic.selected && (
                      <div className="mt-2">
                        <p className="text-xs text-muted-foreground mb-2">Content ideas:</p>
                        
                        {/* Content Ideas List */}
                        {topic.examples.map((example, index) => (
                          <div key={index} className="flex gap-2 mb-2">
                            <Input
                              value={example}
                              onChange={(e) => handleContentIdeaChange(topic.id, index, e.target.value)}
                              className="flex-1"
                            />
                            <Button 
                              type="button" 
                              variant="outline" 
                              size="icon" 
                              onClick={() => handleRemoveContentIdea(topic.id, index)}
                            >
                              <span className="sr-only">Remove</span>
                              <span aria-hidden="true">Ã—</span>
                            </Button>
                          </div>
                        ))}
                        
                        {/* Add New Content Idea */}
                        {topic.selected && (
                          <div className="mt-2">
                            <Button 
                              type="button" 
                              variant="outline" 
                              onClick={() => {
                                const newIdeaText = "New content idea";
                                handleAddContentIdea(topic.id, newIdeaText);
                              }} 
                              className="w-full"
                            >
                              Add Another Content Idea
                            </Button>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                ))}

                <div className="flex gap-2 mt-4">
                  <Input
                    placeholder="Add a custom topic..."
                    value={newTopic}
                    onChange={(e) => setNewTopic(e.target.value)}
                    className="flex-1"
                  />
                  <Button type="button" onClick={handleAddTopic} disabled={!newTopic.trim()}>
                    <Plus className="h-4 w-4 mr-2" />
                    Add
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex justify-between items-center">
            {(() => {
              const selectedCount = topics.filter((t) => t.selected).length;
              const isRecommendedRange = selectedCount >= 3 && selectedCount <= 5;
              
              return (
                <>
                  <div>
                    <Badge 
                      variant="outline" 
                      className={`${isRecommendedRange ? 'border-green-500 bg-green-50 text-green-700' : 'border-yellow-500 bg-yellow-50 text-yellow-700'}`}
                    >
                      {selectedCount} topics selected
                    </Badge>
                  </div>
                  <p className={`text-sm ${isRecommendedRange ? 'text-green-600' : 'text-yellow-600'}`}>
                    We recommend 3-5 topics for a focused content strategy
                  </p>
                </>
              );
            })()}
          </div>

          <div className="pt-4">
            <Button type="submit" className="w-full" disabled={isSubmitting}>
              {isSubmitting ? "Processing..." : "Continue to Content Preferences"}
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
        </form>
      </div>
  )
}
